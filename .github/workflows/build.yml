---
name: Build

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    # The branches below must be a subset of the branches above
    branches:
      - master
  schedule:
    - cron: '00 03 * * *'

permissions:
  contents: read

env:
  TEST_TAG: tuxdude/homelab-base:ci-test

jobs:
  docker:
    name: Build
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Export Build Args as Workflow Env vars
        run: ./build-args.sh >> $GITHUB_ENV

      - name: Dump context
        uses: crazy-max/ghaction-dump-context@v1

      - name: Build and export to Docker
        uses: docker/build-push-action@v2
        with:
          context: .
          load: true
          tags: ${{ env.TEST_TAG }}
          build-args: |
            UPSTREAM_IMAGE_NAME=${{ env.UPSTREAM_IMAGE_NAME }}
            UPSTREAM_IMAGE_LABEL=${{ env.UPSTREAM_IMAGE_LABEL }}
            PACKAGES_TO_INSTALL=${{ env.PACKAGES_TO_INSTALL }}
            PACKAGES_TO_REMOVE=${{ env.PACKAGES_TO_REMOVE }}

      - name: Test
        run: |
          docker run --rm ${{ env.TEST_TAG }} sh -c 'apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y install nginx'

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: tuxdude/homelab-base:master
          build-args: |
            UPSTREAM_IMAGE_NAME=${{ env.UPSTREAM_IMAGE_NAME }}
            UPSTREAM_IMAGE_LABEL=${{ env.UPSTREAM_IMAGE_LABEL }}
            PACKAGES_TO_INSTALL=${{ env.PACKAGES_TO_INSTALL }}
            PACKAGES_TO_REMOVE=${{ env.PACKAGES_TO_REMOVE }}
